# ❌ CONFIGURAZIONE ATTUALE (SBAGLIATA)
- uses: SonarSource/sonarcloud-github-action@v2
  with:
    args: >
      -Dsonar.projectKey=antonioborrelli11-coder_codice_18 
      -Dsonar.organization=antonioborrelli11-coder
    projectBaseDir: .
  env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

---

# ✅ CONFIGURAZIONE CORRETTA (AGGIUNGERE)
- uses: SonarSource/sonarcloud-github-action@v2
  with:
    args: >
      -Dsonar.projectKey=antonioborrelli11-coder_codice_18 
      -Dsonar.organization=antonioborrelli11-coder
      -Dsonar.sources=.
      -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json
    projectBaseDir: .
  env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

---

# 🔧 WORKFLOW COMPLETO FUNZIONANTE
name: SonarCloud Analysis

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Step 1: Installa build-wrapper
    - name: Install SonarCloud build-wrapper
      run: |
        wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip build-wrapper-linux-x86.zip
        chmod +x build-wrapper-linux-x86/build-wrapper-linux-x86-64
        echo "$PWD/build-wrapper-linux-x86" >> $GITHUB_PATH
    
    # Step 2: Clean e build con wrapper
    - name: Build with wrapper
      run: |
        # Clean completo
        make clean || rm -rf build/ *.o
        rm -rf bw-output/
        mkdir -p build
        
        # Build con wrapper (MODIFICA QUESTO COMANDO PER IL TUO PROGETTO)
        build-wrapper-linux-x86-64 --out-dir bw-output gcc -std=c11 -Wall -Wextra -O2 -o build/program *.c
    
    # Step 3: Verifica che il wrapper abbia funzionato
    - name: Verify build-wrapper output
      run: |
        echo "=== Verifica file generati ==="
        ls -la bw-output/ || echo "❌ Directory bw-output non trovata!"
        echo "=== Contenuto compile_commands.json ==="
        cat bw-output/compile_commands.json || echo "❌ File compile_commands.json non trovato!"
        # Verifica che il file non sia vuoto
        [ -s bw-output/compile_commands.json ] || (echo "❌ compile_commands.json è vuoto!" && exit 1)
    
    # Step 4: SonarCloud con parametri corretti
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=antonioborrelli11-coder_codice_18
          -Dsonar.organization=antonioborrelli11-coder
          -Dsonar.sources=.
          -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json
          -Dsonar.exclusions=**/build-wrapper-dump.json,**/bw-output/**

---

# 🚨 SOLUZIONE RAPIDA (se hai fretta)
# Aggiungi solo questa riga ai tuoi args esistenti:
args: >
  -Dsonar.projectKey=antonioborrelli11-coder_codice_18 
  -Dsonar.organization=antonioborrelli11-coder
  -Dsonar.sources=.
  -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json

---

# 🆘 SOLUZIONE ALTERNATIVA (se non hai build-wrapper)
# Disabilita l'analisi C/C++ aggiungendo:
args: >
  -Dsonar.projectKey=antonioborrelli11-coder_codice_18 
  -Dsonar.organization=antonioborrelli11-coder
  -Dsonar.sources=.
  -Dsonar.c.file.suffixes=-
  -Dsonar.cpp.file.suffixes=-
  -Dsonar.objc.file.suffixes=-

---

# 📋 CHECKLIST PER IL FIX
# 1. ✅ Build-wrapper installato correttamente
# 2. ✅ Build eseguito con wrapper (genera compile_commands.json)
# 3. ✅ File bw-output/compile_commands.json non vuoto
# 4. ✅ Parametro -Dsonar.cfamily.compile-commands= aggiunto
# 5. ✅ Path corretto al file compile_commands.json

---

# 🔍 DEBUG: Verifica manuale
# Se vuoi controllare cosa succede, aggiungi questo step prima di SonarCloud:
- name: Debug compile commands
  run: |
    echo "PWD: $(pwd)"
    echo "Files in bw-output:"
    ls -la bw-output/ 2>/dev/null || echo "No bw-output directory"
    echo "Content of compile_commands.json:"
    cat bw-output/compile_commands.json 2>/dev/null || echo "No compile_commands.json"
    echo "JSON validation:"
    python3 -m json.tool bw-output/compile_commands.json 2>/dev/null || echo "Invalid JSON"
